<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.MovieHallMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加影厅记录 -->
	<insert id="addMovieHall" parameterType="movieHall">
		insert into t_movieHall(movieHallName,rows,cols) values 
		(#{movieHallName},#{rows},#{cols})
	</insert>

	<!-- 按照查询条件分页查询影厅记录 -->
	<select id="queryMovieHall" resultMap="movieHallMap" >
		select t_movieHall.* from t_movieHall ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="movieHallMap" type="movieHall">
        <id property="movieHallId" column="movieHallId" />
    </resultMap>

    <!-- 按照查询条件查询所有影厅记录 -->
	<select id="queryMovieHallList" resultMap="movieHallMap" >
		select t_movieHall.* from t_movieHall ${where}
	</select>

    <!-- 按照查询条件的影厅记录数 -->
	<select id="queryMovieHallCount" resultType="int">
		select count(*) from t_movieHall ${where}
	</select>

	<!-- 根据主键查询某个影厅记录 -->
	<select id="getMovieHall" parameterType="int" resultMap="movieHallMap">
		select * from t_movieHall where t_movieHall.movieHallId = #{movieHallId}
	</select>

	<!-- 更新影厅记录 -->
	<update id="updateMovieHall" parameterType="movieHall">
		update t_movieHall set movieHallName=#{movieHallName},rows=#{rows},cols=#{cols} where movieHallId = #{movieHallId}
	</update>

	<!-- 删除影厅记录 -->
	<delete id="deleteMovieHall" parameterType="int">
		delete from t_movieHall where movieHallId=#{movieHallId}
	</delete>

</mapper>
