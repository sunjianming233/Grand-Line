<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.MovieMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加影片记录 -->
	<insert id="addMovie" parameterType="movie">
		insert into t_movie(movieName,movieType,moviePhoto,director,mainPerformer,duration,area,releaseDate,price,opera) values 
		(#{movieName},#{movieType},#{moviePhoto},#{director},#{mainPerformer},#{duration},#{area},#{releaseDate},#{price},#{opera})
	</insert>

	<!-- 按照查询条件分页查询影片记录 -->
	<select id="queryMovie" resultMap="movieMap" >
		select t_movie.* from t_movie ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="movieMap" type="movie">
        <id property="movieId" column="movieId" />
    </resultMap>

    <!-- 按照查询条件查询所有影片记录 -->
	<select id="queryMovieList" resultMap="movieMap" >
		select t_movie.* from t_movie ${where}
	</select>

    <!-- 按照查询条件的影片记录数 -->
	<select id="queryMovieCount" resultType="int">
		select count(*) from t_movie ${where}
	</select>

	<!-- 根据主键查询某个影片记录 -->
	<select id="getMovie" parameterType="int" resultMap="movieMap">
		select * from t_movie where t_movie.movieId = #{movieId}
	</select>

	<!-- 更新影片记录 -->
	<update id="updateMovie" parameterType="movie">
		update t_movie set movieName=#{movieName},movieType=#{movieType},moviePhoto=#{moviePhoto},director=#{director},mainPerformer=#{mainPerformer},duration=#{duration},area=#{area},releaseDate=#{releaseDate},price=#{price},opera=#{opera} where movieId = #{movieId}
	</update>

	<!-- 删除影片记录 -->
	<delete id="deleteMovie" parameterType="int">
		delete from t_movie where movieId=#{movieId}
	</delete>

</mapper>
